---
- name: Enable cgroup via boot commandline if not already enabled for Ubuntu on a Raspberry Pi
  lineinfile:
    path: /boot/firmware/cmdline.txt
    backrefs: yes
    regexp: '^((?!.*\bcgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory\b).*)$'
    line: '\1 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory'
  notify: reboot

- name: Install linux-modules-extra-raspi package
  apt:
    name: linux-modules-extra-raspi
    state: present
  notify: reboot

- meta: flush_handlers

- name: Enable IPv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: yes

- name: Enable IPv6 forwarding
  sysctl:
    name: net.ipv6.conf.all.forwarding
    value: "1"
    state: present
    reload: yes
  when: ansible_all_ipv6_addresses

- name: Download k3s binary arm64
  get_url:
    url: "{{ rancher_k3s_url }}/{{ rancher_k3s_version }}/k3s-arm64"
    checksum: "sha256:{{ rancher_k3s_url }}/{{ rancher_k3s_version }}/sha256sum-arm64.txt"
    dest: "{{ rancher_k3s_download_dir }}/k3s"
    owner: root
    group: root
    mode: 0755
  register: binary

- name: Copy k3s service file
  template:
    src: templates/k3s.service
    dest: "{{ rancher_k3s_systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: 0644
  register: k3s_service

- name: Create k3s server directory
  file:
    path: "{{ rancher_k3s_server_dir }}"
    state: directory
    mode: 0755

- name: Enable and check k3s service
  systemd:
    name: k3s
    daemon_reload: yes
    state: started
    enabled: yes

- name: Restart k3s service if binary or service file changed
  systemd:
    name: k3s
    daemon_reload: yes
    state: restarted
    enabled: yes
  when: binary.changed or k3s_service.changed

- name: Wait for node-token
  wait_for:
    path: "{{ rancher_k3s_server_dir }}/server/node-token"

- name: Register node-token file access mode
  stat:
    path: "{{ rancher_k3s_server_dir }}/server/node-token"
  register: p

- name: Change file access node-token
  file:
    path: "{{ rancher_k3s_server_dir }}/server/node-token"
    mode: "g+rx,o+rx"

- name: Read node-token from master
  slurp:
    path: "{{ rancher_k3s_server_dir }}/server/node-token"
  register: node_token

- name: Store Master node-token
  set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Restore node-token file access
  file:
    path: "{{ rancher_k3s_server_dir }}/server/node-token"
    mode: "{{ p.stat.mode }}"

- name: Create directory .kube
  file:
    path: "/home/{{ ansible_user }}/.kube"
    state: directory
    owner: "{{ ansible_user }}"
    mode: "u=rwx,g=rx,o="

- name: Copy config file to user home directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ rancher_k3s_kubeconfig }}"
    remote_src: yes
    owner: "{{ ansible_user }}"
    mode: "u=rw,g=,o="

- name: Create kubectl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: Create crictl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link

- name: Replace https://localhost:6443 by https://master-ip:6443
  command: |
    k3s kubectl config set-cluster default
      --server=https://{{ groups["rancher"][0] }}:6443
      --kubeconfig {{ rancher_k3s_kubeconfig }}
  changed_when: true

- name: Changes kubeconfig path
  lineinfile:
    path: /home/{{ ansible_user }}/.bashrc
    regexp: '^export KUBECONFIG='
    line: export KUBECONFIG="{{ rancher_k3s_kubeconfig }}"

- name: Changes kubeconfig path for root
  lineinfile:
    path: /root/.bashrc
    regexp: '^export KUBECONFIG='
    line: export KUBECONFIG="{{ rancher_k3s_kubeconfig }}"
